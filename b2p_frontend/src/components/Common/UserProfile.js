import React, { useState, useEffect } from "react";
import "./UserProfile.scss";
import {
  getUserById,
  updateUserProfile,
  changePassword,
  checkPasswordStatus,
  getAllBankType,
  updateUserImage,
} from "../../services/apiService";

const UserProfile = (props) => {
  const [activeTab, setActiveTab] = useState("profile");
  const [loading, setLoading] = useState(false);
  const [pageLoading, setPageLoading] = useState(true);
  const [message, setMessage] = useState("");
  const [avatarPreview, setAvatarPreview] = useState("");
  const [bankTypes, setBankTypes] = useState([]);
  const [originalEmail, setOriginalEmail] = useState("");
  const [imageLoadError, setImageLoadError] = useState(false);
  const [passwordStatus, setPasswordStatus] = useState(null);

  // Temporary userId - s·∫Ω thay th·∫ø b·∫±ng userId t·ª´ authentication sau
  const userId = 2;

  // State cho th√¥ng tin c∆° b·∫£n
  const [profileData, setProfileData] = useState({
    fullName: "",
    email: "",
    phone: "",
    isMale: true,
    address: "",
    dob: "",
    accountNumber: "",
    accountHolder: "",
    bankTypeId: 0,
    bankName: "",
    imageUrl: "",
    imageId: null,
  });

  // State cho ƒë·ªïi m·∫≠t kh·∫©u
  const [passwordData, setPasswordData] = useState({
    oldPassword: "",
    newPassword: "",
    confirmPassword: "",
  });

  const [errors, setErrors] = useState({});

  // üéØ useEffect ƒë·ªÉ check password status khi chuy·ªÉn sang tab password
  useEffect(() => {
    const fetchPasswordStatus = async () => {
      if (activeTab === "password" && userId) {
        try {
          setPasswordStatus(null);

          const response = await checkPasswordStatus(userId);

          console.log("=== PASSWORD STATUS RESPONSE ===");
          console.log(JSON.stringify(response, null, 2));

          // üéØ Fix: response c√≥ lowercase properties do axios interceptor
          const isSuccess = response?.success === true;

          if (isSuccess && response.data) {
            const passwordData = response.data;

            setPasswordStatus({
              UserId: passwordData.userId,
              HasPassword: passwordData.hasPassword,
              RequireOldPassword: passwordData.requireOldPassword,
              PasswordStatus: passwordData.passwordStatus,
              FullName: passwordData.fullName,
              Email: passwordData.email,
              Phone: passwordData.phone,
            });

            console.log("‚úÖ Password status set successfully");
            console.log("HasPassword:", passwordData.hasPassword);
            console.log("RequireOldPassword:", passwordData.requireOldPassword);
          } else {
            console.warn("Could not get password status:", response?.message);
            setPasswordStatus({
              HasPassword: true,
              RequireOldPassword: true,
              PasswordStatus: "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c tr·∫°ng th√°i",
            });
          }
        } catch (error) {
          console.error("Error checking password status:", error);
          setPasswordStatus({
            HasPassword: true,
            RequireOldPassword: true,
            PasswordStatus: "L·ªói khi ki·ªÉm tra tr·∫°ng th√°i",
          });
        }
      }
    };

    fetchPasswordStatus();
  }, [activeTab, userId]);

  // Updated Google Drive URL converter using your working function
  const convertGoogleDriveUrl = (url) => {
    if (!url) return "";

    if (url.includes("drive.google.com")) {
      const fileIdMatch =
        url.match(/\/d\/([a-zA-Z0-9-_]+)/) ||
        url.match(/[?&]id=([a-zA-Z0-9-_]+)/);
      if (fileIdMatch) {
        const fileId = fileIdMatch[1];
        return `https://drive.google.com/thumbnail?id=${fileId}&sz=w1000`;
      }
    }

    return url;
  };

  // Handle image load error with multiple fallback attempts
  const handleImageError = (e, attempt = 0) => {
    console.warn(
      `Failed to load image (attempt ${attempt + 1}):`,
      e.target.src
    );

    if (profileData.imageUrl && attempt < 2) {
      const fileIdMatch =
        profileData.imageUrl.match(/\/d\/([a-zA-Z0-9-_]+)/) ||
        profileData.imageUrl.match(/[?&]id=([a-zA-Z0-9-_]+)/);

      if (fileIdMatch) {
        const fileId = fileIdMatch[1];
        let fallbackUrl;

        if (attempt === 0) {
          // First fallback: Use thumbnail with different size
          fallbackUrl = `https://drive.google.com/thumbnail?id=${fileId}&sz=w500`;
        } else if (attempt === 1) {
          // Second fallback: Use uc?export=view format
          fallbackUrl = `https://drive.google.com/uc?export=view&id=${fileId}`;
        }

        if (fallbackUrl) {
          console.log(`Trying fallback ${attempt + 1}:`, fallbackUrl);
          e.target.src = fallbackUrl;
          e.target.onerror = (newE) => handleImageError(newE, attempt + 1);
          return;
        }
      }
    }

    // All attempts failed
    setImageLoadError(true);
  };

  // Reset image error state when image URL changes
  useEffect(() => {
    setImageLoadError(false);
  }, [profileData.imageUrl, avatarPreview]);

  // Helper function ƒë·ªÉ t√¨m bank type ID t·ª´ bank name
  const findBankTypeIdByName = (bankName, bankTypesList) => {
    if (!bankName || !bankTypesList.length) return 0;

    const foundBank = bankTypesList.find(
      (bank) =>
        bank.bankName &&
        bank.bankName.toLowerCase().trim() === bankName.toLowerCase().trim()
    );

    console.log("Finding bank:", bankName, "Found:", foundBank);
    return foundBank ? foundBank.bankTypeId : 0;
  };

  // Load danh s√°ch ng√¢n h√†ng
  const fetchBankTypes = async () => {
    try {
      const response = await getAllBankType("", 1, 100);

      // Check both possible response structures
      if (response && (response.success || response.Success)) {
        const bankTypesList =
          response.data?.items ||
          response.data ||
          response.Data?.items ||
          response.Data ||
          [];
        setBankTypes(bankTypesList);
        console.log("Bank types loaded:", bankTypesList);
        return bankTypesList;
      } else {
        console.warn("Could not load bank types:", response);
        setBankTypes([]);
        return [];
      }
    } catch (error) {
      console.error("Error fetching bank types:", error);
      setBankTypes([]);
      return [];
    }
  };

  // Load d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ API - SIMPLIFIED
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        setPageLoading(true);

        // Load bank types tr∆∞·ªõc
        const bankTypesList = await fetchBankTypes();

        // Load user data
        const userDataResult = await getUserById(userId);

        console.log("=== GET USER RESPONSE ===");
        console.log(JSON.stringify(userDataResult, null, 2));

        // Check both possible response structures for getUserById
        const isSuccess =
          userDataResult?.success === true || userDataResult?.Success === true;
        const userData = userDataResult?.data || userDataResult?.Data;

        if (isSuccess && userData) {
          // Store original email for comparison
          setOriginalEmail(userData.email || "");

          // T·ª± ƒë·ªông kh·ªõp bankTypeId t·ª´ bankName n·∫øu c√≥
          let matchedBankTypeId = userData.bankTypeId || 0;

          if (userData.bankName && bankTypesList.length > 0) {
            const foundBankTypeId = findBankTypeIdByName(
              userData.bankName,
              bankTypesList
            );
            if (foundBankTypeId > 0) {
              matchedBankTypeId = foundBankTypeId;
              console.log(
                `Matched bank "${userData.bankName}" with ID: ${foundBankTypeId}`
              );
            } else {
              const existsInList = bankTypesList.find(
                (bank) => bank.bankTypeId === userData.bankTypeId
              );
              if (!existsInList) {
                matchedBankTypeId = 0;
                console.log(
                  `Bank "${userData.bankName}" not found in bank types list, reset to default`
                );
              }
            }
          } else if (userData.bankTypeId && bankTypesList.length > 0) {
            const existsInList = bankTypesList.find(
              (bank) => bank.bankTypeId === userData.bankTypeId
            );
            if (!existsInList) {
              matchedBankTypeId = 0;
              console.log(
                `BankTypeId ${userData.bankTypeId} not found in bank types list, reset to default`
              );
            }
          }

          setProfileData({
            fullName: userData.fullName || "",
            email: userData.email || "",
            phone: userData.phone || "",
            isMale: userData.isMale !== undefined ? userData.isMale : true,
            address: userData.address || "",
            dob: userData.dob ? userData.dob.split("T")[0] : "",
            accountNumber: userData.accountNumber || "",
            accountHolder: userData.accountHolder || "",
            bankTypeId: matchedBankTypeId,
            bankName: userData.bankName || "",
            imageUrl: userData.imageUrl || "",
            imageId: userData.imageId || null,
          });

          // Set avatar preview n·∫øu c√≥ imageUrl
          if (userData.imageUrl) {
            const convertedUrl = convertGoogleDriveUrl(userData.imageUrl);
            setAvatarPreview(convertedUrl);
            console.log("Original image URL:", userData.imageUrl);
            console.log("Converted image URL:", convertedUrl);
          }
        } else {
          const errorMessage =
            userDataResult?.message ||
            userDataResult?.Message ||
            "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng";
          setMessage(errorMessage);
        }
      } catch (error) {
        console.error("Error fetching data:", error);
        setMessage("C√≥ l·ªói x·∫£y ra khi t·∫£i th√¥ng tin");
      } finally {
        setPageLoading(false);
      }
    };

    fetchUserData();
  }, [userId]);

  // Simplified avatar upload handler
  const handleAvatarChange = async (e) => {
    const file = e.target.files[0];
    if (file) {
      // Validate file size (10MB limit to match backend)
      if (file.size > 10 * 1024 * 1024) {
        setMessage("K√≠ch th∆∞·ªõc file kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 10MB");
        return;
      }

      // Validate file type
      const allowedTypes = [
        "image/jpeg",
        "image/jpg",
        "image/png",
        "image/gif",
      ];
      if (!allowedTypes.includes(file.type)) {
        setMessage("Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPEG, PNG, GIF)");
        return;
      }

      // Check if we have imageId to update
      if (!profileData.imageId) {
        setMessage(
          "Kh√¥ng t√¨m th·∫•y ·∫£nh ƒë·ªÉ c·∫≠p nh·∫≠t, vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n"
        );
        return;
      }

      try {
        setLoading(true);
        setMessage("");
        setImageLoadError(false);

        // Show preview immediately (local file preview)
        const reader = new FileReader();
        reader.onloadend = () => {
          setAvatarPreview(reader.result);
        };
        reader.readAsDataURL(file);

        // Update existing image using profileData.imageId
        console.log("Updating image with ID:", profileData.imageId);
        const response = await updateUserImage(
          profileData.imageId,
          file,
          1,
          "Profile avatar"
        );

        console.log("=== UPDATE IMAGE RESPONSE ===");
        console.log(JSON.stringify(response, null, 2));

        if (response && response.data) {
          const responseData =
            response.data.Data || response.data.data || response.data;
          const { imageUrl, imageId, message: updateMessage } = responseData;

          if (imageUrl) {
            // Convert Google Drive link
            const convertedUrl = convertGoogleDriveUrl(imageUrl);

            setProfileData((prev) => ({
              ...prev,
              imageUrl: imageUrl,
              imageId: imageId || prev.imageId,
            }));

            // Use converted URL for preview
            setAvatarPreview(convertedUrl);

            setMessage(updateMessage || "C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng");
            setTimeout(() => setMessage(""), 5000);

            console.log("‚úÖ Avatar updated successfully:");
            console.log("Image ID:", imageId || profileData.imageId);
            console.log("Original URL:", imageUrl);
            console.log("Converted URL:", convertedUrl);
          } else {
            setMessage("C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th·∫•t b·∫°i");
          }
        } else {
          setMessage("C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th·∫•t b·∫°i");
        }
      } catch (error) {
        console.error("=== UPDATE IMAGE ERROR ===");
        console.error("Error:", error);

        // Handle specific error responses
        if (error.response?.data) {
          const errorMessage =
            error.response.data.message ||
            error.response.data.Message ||
            "C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th·∫•t b·∫°i";
          setMessage(errorMessage);
        } else {
          setMessage("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán");
        }

        // Reset preview on error - keep the current avatar
        if (profileData.imageUrl) {
          setAvatarPreview(convertGoogleDriveUrl(profileData.imageUrl));
        } else {
          setAvatarPreview("");
        }
      } finally {
        setLoading(false);
      }
    }
  };

  // Determine what to show in avatar
  const getAvatarContent = () => {
    // Priority: local preview > converted server image > fallback initials
    const imageUrl =
      avatarPreview || convertGoogleDriveUrl(profileData.imageUrl);

    if (imageUrl && !imageLoadError) {
      return (
        <img
          src={imageUrl}
          alt="Avatar"
          className="user-profile__avatar-image"
          onError={(e) => handleImageError(e, 0)}
          onLoad={() => {
            console.log("‚úÖ Image loaded successfully:", imageUrl);
            setImageLoadError(false);
          }}
        />
      );
    } else {
      // Show initials as fallback
      return (
        <div className="user-profile__avatar-placeholder">
          {getAvatarInitials(profileData.fullName)}
          {imageLoadError && profileData.imageUrl && (
            <div className="avatar-error-overlay" title="Kh√¥ng th·ªÉ t·∫£i ·∫£nh">
              <i className="fas fa-exclamation-triangle"></i>
            </div>
          )}
        </div>
      );
    }
  };

  // X·ª≠ l√Ω thay ƒë·ªïi input cho profile
  const handleProfileChange = (e) => {
    const { name, value, type, checked } = e.target;
    setProfileData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));

    // Clear error khi user nh·∫≠p l·∫°i
    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }

    // Clear message khi user thay ƒë·ªïi input
    if (message) {
      setMessage("");
    }
  };

  // X·ª≠ l√Ω thay ƒë·ªïi input cho password
  const handlePasswordChange = (e) => {
    const { name, value } = e.target;
    setPasswordData((prev) => ({
      ...prev,
      [name]: value,
    }));

    // Clear error khi user nh·∫≠p l·∫°i
    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }

    // Clear message khi user thay ƒë·ªïi input
    if (message) {
      setMessage("");
    }
  };

  // Updated validation - kh·ªõp v·ªõi backend logic m·ªõi
  const validateProfile = () => {
    const newErrors = {};

    // Basic checks only - let backend do the heavy lifting
    if (!profileData.fullName?.trim()) {
      newErrors.fullName = "Vui l√≤ng nh·∫≠p t√™n";
    }

    if (!profileData.email?.trim()) {
      newErrors.email = "Vui l√≤ng nh·∫≠p email";
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(profileData.email)) {
      newErrors.email = "ƒê·ªãnh d·∫°ng email kh√¥ng ƒë√∫ng";
    }

    if (!profileData.address?.trim()) {
      newErrors.address = "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ";
    }

    if (!profileData.dob) {
      newErrors.dob = "Vui l√≤ng ch·ªçn ng√†y sinh";
    }

    // üéØ Bank account validation - CH·ªà validate khi c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin
    const hasAccountNumber = profileData.accountNumber?.trim();
    const hasAccountHolder = profileData.accountHolder?.trim();
    const hasBankTypeId = profileData.bankTypeId && profileData.bankTypeId > 0;

    // N·∫øu c√≥ √≠t nh·∫•t 1 field bank account ƒë∆∞·ª£c ƒëi·ªÅn, y√™u c·∫ßu ph·∫£i ƒëi·ªÅn ƒë·∫ßy ƒë·ªß
    if (hasAccountNumber || hasAccountHolder || hasBankTypeId) {
      if (!hasAccountNumber) {
        newErrors.accountNumber = "Vui l√≤ng nh·∫≠p s·ªë t√†i kho·∫£n";
      }

      if (!hasAccountHolder) {
        newErrors.accountHolder = "Vui l√≤ng nh·∫≠p t√™n ch·ªß t√†i kho·∫£n";
      }

      if (!hasBankTypeId) {
        newErrors.bankTypeId = "Vui l√≤ng ch·ªçn ng√¢n h√†ng";
      }
    }

    return newErrors;
  };

  // S·ª≠a l·∫°i function validatePassword trong UserProfile.js
  const validatePassword = () => {
    const newErrors = {};

    // Ch·ªâ require old password n·∫øu user ƒë√£ c√≥ password
    if (
      passwordStatus?.RequireOldPassword &&
      !passwordData.oldPassword?.trim()
    ) {
      newErrors.oldPassword = "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
    }

    // üéØ NEW: Validate new password v·ªõi regex m·ªõi t·ª´ backend
    if (!passwordData.newPassword?.trim()) {
      newErrors.newPassword = "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi";
    } else {
      // üéØ Backend regex: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{6,}$
      const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{6,}$/;

      if (!passwordRegex.test(passwordData.newPassword)) {
        newErrors.newPassword =
          "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ hoa, 1 ch·ªØ th∆∞·ªùng v√† 1 s·ªë, t·ªëi thi·ªÉu 6 k√Ω t·ª±";
      }
    }

    // üéØ Validate confirm password - kh·ªõp v·ªõi backend
    if (!passwordData.confirmPassword?.trim()) {
      newErrors.confirmPassword = "X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
    } else if (passwordData.newPassword !== passwordData.confirmPassword) {
      newErrors.confirmPassword = "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng tr√πng kh·ªõp";
    }

    // üéØ REMOVED: Check if new password is same as old password
    // Backend s·∫Ω handle vi·ªác n√†y, frontend kh√¥ng c·∫ßn check n·ªØa

    return newErrors;
  };

  // üéØ Updated profile update handler - th√™m refresh userData sau khi success
  const handleUpdateProfile = async (e) => {
    e.preventDefault();

    // Basic frontend validation
    const validationErrors = validateProfile();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    setLoading(true);
    setMessage("");
    setErrors({});

    try {
      // üéØ Ch·ªâ g·ª≠i bank account data n·∫øu c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin (kh·ªõp v·ªõi backend logic)
      const hasCompleteBank =
        profileData.accountNumber?.trim() &&
        profileData.accountHolder?.trim() &&
        profileData.bankTypeId > 0;

      const updateData = {
        fullName: profileData.fullName.trim(),
        email: profileData.email.trim(),
        address: profileData.address.trim(),
        dob: profileData.dob,
        isMale: profileData.isMale,
      };

      // üéØ Ch·ªâ th√™m bank account fields n·∫øu c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin
      if (hasCompleteBank) {
        updateData.accountNumber = profileData.accountNumber.trim();
        updateData.accountHolder = profileData.accountHolder.trim();
        updateData.bankTypeId = parseInt(profileData.bankTypeId);
      }

      console.log("Updating profile with data:", updateData);
      console.log("Has complete bank info:", hasCompleteBank);

      const response = await updateUserProfile(userId, updateData);

      console.log("=== UPDATE RESPONSE ===");
      console.log(JSON.stringify(response, null, 2));

      // Handle both uppercase and lowercase properties
      const isSuccess =
        response?.Success === true || response?.success === true;
      const errorMessage = response?.Message || response?.message;
      const status = response?.Status || response?.status;

      console.log("isSuccess:", isSuccess);
      console.log("errorMessage:", errorMessage);
      console.log("status:", status);

      if (isSuccess) {
        // Success case
        setMessage(errorMessage || "C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng");
        setTimeout(() => setMessage(""), 5000);

        // Update original email after successful update
        setOriginalEmail(updateData.email);

        // üéØ REFRESH USER DATA sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
        try {
          console.log("üîÑ Refreshing user data after successful update...");
          const userResponse = await getUserById(userId);

          console.log("=== REFRESH USER DATA RESPONSE ===");
          console.log(JSON.stringify(userResponse, null, 2));

          const isRefreshSuccess =
            userResponse?.success === true || userResponse?.Success === true;
          const refreshedUserData = userResponse?.data || userResponse?.Data;

          if (isRefreshSuccess && refreshedUserData) {
            // üéØ C·∫≠p nh·∫≠t l·∫°i to√†n b·ªô profileData v·ªõi d·ªØ li·ªáu m·ªõi t·ª´ server
            let matchedBankTypeId = refreshedUserData.bankTypeId || 0;

            // T·ª± ƒë·ªông kh·ªõp bankTypeId t·ª´ bankName n·∫øu c√≥ (nh∆∞ logic ban ƒë·∫ßu)
            if (refreshedUserData.bankName && bankTypes.length > 0) {
              const foundBankTypeId = findBankTypeIdByName(
                refreshedUserData.bankName,
                bankTypes
              );
              if (foundBankTypeId > 0) {
                matchedBankTypeId = foundBankTypeId;
                console.log(
                  `üîÑ Re-matched bank "${refreshedUserData.bankName}" with ID: ${foundBankTypeId}`
                );
              }
            }

            setProfileData({
              fullName: refreshedUserData.fullName || "",
              email: refreshedUserData.email || "",
              phone: refreshedUserData.phone || "",
              isMale:
                refreshedUserData.isMale !== undefined
                  ? refreshedUserData.isMale
                  : true,
              address: refreshedUserData.address || "",
              dob: refreshedUserData.dob
                ? refreshedUserData.dob.split("T")[0]
                : "",
              accountNumber: refreshedUserData.accountNumber || "",
              accountHolder: refreshedUserData.accountHolder || "",
              bankTypeId: matchedBankTypeId,
              bankName: refreshedUserData.bankName || "",
              imageUrl: refreshedUserData.imageUrl || "",
              imageId: refreshedUserData.imageId || null,
            });

            // üéØ C·∫≠p nh·∫≠t l·∫°i originalEmail v·ªõi email m·ªõi t·ª´ server
            setOriginalEmail(refreshedUserData.email || "");

            console.log("‚úÖ User data refreshed successfully after update");
          } else {
            console.warn(
              "‚ùå Could not refresh user data:",
              userResponse?.message || userResponse?.Message
            );
          }
        } catch (refreshError) {
          console.error("‚ùå Error refreshing user data:", refreshError);
          // Kh√¥ng l√†m g√¨ c·∫£, ch·ªâ log error - user v·∫´n th·∫•y success message
        }
      } else {
        // Error case - map to specific fields
        console.log("Processing error message:", errorMessage);

        if (errorMessage) {
          // EMAIL ERRORS
          if (
            errorMessage.includes("Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng") ||
            errorMessage.includes("email ƒë√£ t·ªìn t·∫°i") ||
            errorMessage.includes("email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng")
          ) {
            setErrors({ email: errorMessage });
            console.log("‚úÖ Set email duplicate error:", errorMessage);
          } else if (
            errorMessage.includes("ƒê·ªãa ch·ªâ Email kh√¥ng h·ª£p l·ªá") ||
            errorMessage.includes("Email kh√¥ng h·ª£p l·ªá") ||
            errorMessage.includes("ƒë·ªãnh d·∫°ng email")
          ) {
            setErrors({ email: errorMessage });
            console.log("‚úÖ Set email invalid error:", errorMessage);
          } else if (errorMessage.includes("Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")) {
            setErrors({ email: errorMessage });
            console.log("‚úÖ Set email empty error:", errorMessage);

            // AGE/DOB ERRORS
          } else if (
            errorMessage.includes("Ng∆∞·ªùi d√πng ph·∫£i t·ª´ 15 tu·ªïi tr·ªü l√™n") ||
            errorMessage.includes("15 tu·ªïi") ||
            errorMessage.includes("tu·ªïi")
          ) {
            setErrors({ dob: errorMessage });
            console.log("‚úÖ Set age error:", errorMessage);
          } else if (
            errorMessage.includes("Ng√†y sinh kh√¥ng ƒë∆∞·ª£c l√† ng√†y t∆∞∆°ng lai") ||
            errorMessage.includes("t∆∞∆°ng lai")
          ) {
            setErrors({ dob: errorMessage });
            console.log("‚úÖ Set future date error:", errorMessage);
          } else if (errorMessage.includes("Ng√†y sinh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")) {
            setErrors({ dob: errorMessage });
            console.log("‚úÖ Set dob empty error:", errorMessage);

            // FULLNAME ERRORS
          } else if (
            errorMessage.includes("T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
          ) {
            setErrors({ fullName: errorMessage });
            console.log("‚úÖ Set fullName empty error:", errorMessage);
          } else if (
            errorMessage.includes(
              "T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±"
            ) ||
            errorMessage.includes("50 k√Ω t·ª±")
          ) {
            setErrors({ fullName: errorMessage });
            console.log("‚úÖ Set fullName length error:", errorMessage);

            // ADDRESS ERRORS
          } else if (errorMessage.includes("ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")) {
            setErrors({ address: errorMessage });
            console.log("‚úÖ Set address empty error:", errorMessage);
          } else if (
            errorMessage.includes("ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±") ||
            errorMessage.includes("255 k√Ω t·ª±")
          ) {
            setErrors({ address: errorMessage });
            console.log("‚úÖ Set address length error:", errorMessage);

            // ACCOUNT NUMBER ERRORS
          } else if (
            errorMessage.includes("S·ªë t√†i kho·∫£n kh√¥ng h·ª£p l·ªá") ||
            errorMessage.includes("9-16 k√Ω t·ª±") ||
            errorMessage.includes("t√†i kho·∫£n")
          ) {
            setErrors({ accountNumber: errorMessage });
            console.log("‚úÖ Set accountNumber error:", errorMessage);

            // ACCOUNT HOLDER ERRORS - üéØ Ch·ªâ c√≤n l·ªói length, b·ªè empty error
          } else if (
            errorMessage.includes(
              "T√™n ch·ªß t√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±"
            )
          ) {
            setErrors({ accountHolder: errorMessage });
            console.log("‚úÖ Set accountHolder length error:", errorMessage);

            // BANK TYPE ERRORS
          } else if (
            errorMessage.includes("Lo·∫°i ng√¢n h√†ng kh√¥ng h·ª£p l·ªá") ||
            errorMessage.includes("ng√¢n h√†ng kh√¥ng h·ª£p l·ªá")
          ) {
            setErrors({ bankTypeId: errorMessage });
            console.log("‚úÖ Set bankTypeId invalid error:", errorMessage);
          } else if (
            errorMessage.includes("Kh√¥ng t√¨m th·∫•y ki·ªÉu ng√¢n h√†ng ƒë√£ ch·ªçn") ||
            errorMessage.includes("kh√¥ng t√¨m th·∫•y") ||
            errorMessage.includes("ng√¢n h√†ng")
          ) {
            setErrors({ bankTypeId: errorMessage });
            console.log("‚úÖ Set bankTypeId not found error:", errorMessage);

            // GENERAL ERRORS
          } else {
            setMessage(errorMessage);
            console.log("‚úÖ Set general message:", errorMessage);
          }
        } else {
          // No error message available
          setMessage("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin");
          console.log("‚ùå No error message available");
        }
      }
    } catch (error) {
      console.error("=== UPDATE CATCH ERROR ===");
      console.error("Error:", error);
      setMessage("C√≥ l·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setLoading(false);
    }
  };

  // üéØ X·ª≠ l√Ω ƒë·ªïi m·∫≠t kh·∫©u - FIXED
  const handleChangePassword = async (e) => {
    e.preventDefault();

    const validationErrors = validatePassword();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    setLoading(true);
    setMessage("");
    setErrors({});

    try {
      const changePasswordRequest = {
        userId: userId,
        newPassword: passwordData.newPassword,
        confirmPassword: passwordData.confirmPassword,
      };

      // üéØ Ch·ªâ th√™m oldPassword n·∫øu RequireOldPassword = true
      if (passwordStatus?.RequireOldPassword) {
        changePasswordRequest.oldPassword = passwordData.oldPassword;
      }

      console.log("Changing password with data:", changePasswordRequest);

      const response = await changePassword(changePasswordRequest);

      console.log("=== CHANGE PASSWORD RESPONSE ===");
      console.log(JSON.stringify(response, null, 2));

      // üéØ Fix: Check c·∫£ uppercase v√† lowercase cho change password response
      const isSuccess =
        response?.success === true || response?.Success === true;
      const errorMessage = response?.message || response?.Message;

      if (isSuccess) {
        // üéØ Success - show appropriate message
        const successMessage = passwordStatus?.HasPassword
          ? "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng"
          : "Thi·∫øt l·∫≠p m·∫≠t kh·∫©u th√†nh c√¥ng";

        setMessage(errorMessage || successMessage);

        // Reset form
        setPasswordData({
          oldPassword: "",
          newPassword: "",
          confirmPassword: "",
        });

        // üéØ Update password status sau khi th√†nh c√¥ng
        setPasswordStatus((prev) => ({
          ...prev,
          HasPassword: true,
          RequireOldPassword: true,
          PasswordStatus: "ƒê√£ thi·∫øt l·∫≠p m·∫≠t kh·∫©u",
        }));

        setTimeout(() => setMessage(""), 5000);
      } else {
        // Error case
        if (errorMessage) {
          if (
            errorMessage.includes("m·∫≠t kh·∫©u c≈©") &&
            errorMessage.includes("tr·ªëng")
          ) {
            setErrors({ oldPassword: errorMessage });
          } else if (
            errorMessage.includes("M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng") ||
            errorMessage.includes("M·∫≠t kh·∫©u c≈© sai") ||
            errorMessage.includes("M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng") ||
            errorMessage.toLowerCase().includes("sai m·∫≠t kh·∫©u")
          ) {
            setErrors({ oldPassword: errorMessage });
          } else if (
            errorMessage.includes("m·∫≠t kh·∫©u m·ªõi") &&
            errorMessage.includes("tr·ªëng")
          ) {
            setErrors({ newPassword: errorMessage });
          } else if (
            errorMessage.includes("√≠t nh·∫•t 8") ||
            errorMessage.includes("8 k√Ω t·ª±")
          ) {
            setErrors({ newPassword: errorMessage });
          } else if (
            errorMessage.includes("x√°c nh·∫≠n") &&
            errorMessage.includes("tr·ªëng")
          ) {
            setErrors({ confirmPassword: errorMessage });
          } else if (
            errorMessage.includes("kh√¥ng tr√πng kh·ªõp") ||
            errorMessage.includes("tr√πng kh·ªõp")
          ) {
            setErrors({ confirmPassword: errorMessage });
          } else {
            setMessage(errorMessage);
          }
        } else {
          setMessage("C√≥ l·ªói x·∫£y ra khi ƒë·ªïi m·∫≠t kh·∫©u");
        }
      }
    } catch (error) {
      console.error("=== CHANGE PASSWORD CATCH ERROR ===", error);

      let errorMessage = "C√≥ l·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i.";

      if (error && typeof error === "object") {
        errorMessage = error.message || error.Message || errorMessage;
      }

      setMessage(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // Generate avatar initials
  const getAvatarInitials = (fullName) => {
    if (!fullName) return "U";
    return fullName
      .split(" ")
      .map((name) => name.charAt(0))
      .join("")
      .substring(0, 2)
      .toUpperCase();
  };

  // Get bank name by ID
  const getBankNameById = (bankTypeId) => {
    const bank = bankTypes.find(
      (bank) => bank.bankTypeId === parseInt(bankTypeId)
    );
    return bank ? bank.bankName : "";
  };

  // Check if current bank selection is valid
  const isCurrentBankSelectionValid = () => {
    return (
      profileData.bankTypeId > 0 && getBankNameById(profileData.bankTypeId)
    );
  };

  // Show loading screen while fetching user data
  if (pageLoading) {
    return (
      <div className="user-profile">
        <div className="user-profile__container">
          <div className="user-profile__loading">
            <div className="loading-spinner"></div>
            <p>ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="user-profile">
      <div className="user-profile__container">
        {/* Avatar Section */}
        <div className="user-profile__avatar-section">
          <div className="user-profile__avatar-wrapper">
            {getAvatarContent()}
            <label
              htmlFor="avatar-upload"
              className="user-profile__avatar-upload-btn"
              title="Thay ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán"
            >
              <i className="fas fa-camera"></i>
            </label>
            <input
              id="avatar-upload"
              type="file"
              accept="image/*"
              onChange={handleAvatarChange}
              style={{ display: "none" }}
            />
          </div>
        </div>

        {/* Image load error warning */}
        {imageLoadError && profileData.imageUrl && (
          <div className="user-profile__image-warning">
            <i className="fas fa-exclamation-triangle"></i>
            <span>
              Kh√¥ng th·ªÉ t·∫£i ·∫£nh ƒë·∫°i di·ªán. ƒêang hi·ªÉn th·ªã ch·ªØ c√°i thay th·∫ø.
            </span>
            <button
              className="retry-btn"
              onClick={() => {
                setImageLoadError(false);
                setAvatarPreview(convertGoogleDriveUrl(profileData.imageUrl));
              }}
            >
              <i className="fas fa-redo"></i> Th·ª≠ l·∫°i
            </button>
          </div>
        )}

        {/* Message */}
        {message && (
          <div
            className={`user-profile__message ${
              message.includes("th√†nh c√¥ng") ? "success" : "error"
            }`}
          >
            <i
              className={`fas ${
                message.includes("th√†nh c√¥ng")
                  ? "fa-check-circle"
                  : "fa-exclamation-circle"
              }`}
            ></i>
            {message}
          </div>
        )}

        {/* Show warning if no image ID found */}
        {!profileData.imageId && (
          <div className="user-profile__image-warning">
            <i className="fas fa-info-circle"></i>
            <span>Ch∆∞a t√¨m th·∫•y ·∫£nh ƒë·∫°i di·ªán. Vui l√≤ng t·∫£i l√™n ·∫£nh m·ªõi.</span>
          </div>
        )}

        {/* Tabs */}
        <div className="user-profile__tabs">
          <button
            className={`user-profile__tab ${
              activeTab === "profile" ? "active" : ""
            }`}
            onClick={() => setActiveTab("profile")}
          >
            <i className="fas fa-user"></i>
            Th√¥ng tin c√° nh√¢n
          </button>
          <button
            className={`user-profile__tab ${
              activeTab === "password" ? "active" : ""
            }`}
            onClick={() => setActiveTab("password")}
          >
            <i className="fas fa-lock"></i>
            ƒê·ªïi m·∫≠t kh·∫©u
          </button>
        </div>

        {/* Profile Tab */}
        {activeTab === "profile" && (
          <form className="user-profile__form" onSubmit={handleUpdateProfile}>
            <div className="user-profile__form-row">
              <div className="user-profile__form-group">
                <label>
                  <i className="fas fa-user"></i>
                  T√™n ng∆∞·ªùi d√πng *
                </label>
                <input
                  type="text"
                  name="fullName"
                  value={profileData.fullName}
                  onChange={handleProfileChange}
                  className={errors.fullName ? "error" : ""}
                  placeholder="Nh·∫≠p t√™n ng∆∞·ªùi d√πng"
                />
                {errors.fullName && (
                  <span className="error-text">{errors.fullName}</span>
                )}
              </div>

              <div className="user-profile__form-group">
                <label>
                  <i className="fas fa-envelope"></i>
                  Email *
                </label>
                <input
                  type="email"
                  name="email"
                  value={profileData.email}
                  onChange={handleProfileChange}
                  className={errors.email ? "error" : ""}
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                />
                {errors.email && (
                  <span className="error-text">{errors.email}</span>
                )}
              </div>
            </div>

            <div className="user-profile__form-row">
              <div className="user-profile__form-group">
                <label>
                  <i className="fas fa-phone"></i>
                  S·ªë ƒëi·ªán tho·∫°i
                </label>
                <input
                  type="tel"
                  name="phone"
                  value={profileData.phone}
                  onChange={handleProfileChange}
                  placeholder="S·ªë ƒëi·ªán tho·∫°i kh√¥ng th·ªÉ thay ƒë·ªïi"
                  disabled
                  title="S·ªë ƒëi·ªán tho·∫°i kh√¥ng th·ªÉ thay ƒë·ªïi"
                />
              </div>

              <div className="user-profile__form-group">
                <label>
                  <i className="fas fa-calendar"></i>
                  Ng√†y sinh *
                </label>
                <input
                  type="date"
                  name="dob"
                  value={profileData.dob}
                  onChange={handleProfileChange}
                  className={errors.dob ? "error" : ""}
                />
                {errors.dob && <span className="error-text">{errors.dob}</span>}
              </div>
            </div>

            <div className="user-profile__form-group">
              <label>
                <i className="fas fa-venus-mars"></i>
                Gi·ªõi t√≠nh
              </label>
              <div className="user-profile__radio-group">
                <label className="user-profile__radio">
                  <input
                    type="radio"
                    name="isMale"
                    checked={profileData.isMale === true}
                    onChange={() =>
                      setProfileData((prev) => ({ ...prev, isMale: true }))
                    }
                  />
                  <span className="radio-custom"></span>
                  <span>Nam</span>
                </label>
                <label className="user-profile__radio">
                  <input
                    type="radio"
                    name="isMale"
                    checked={profileData.isMale === false}
                    onChange={() =>
                      setProfileData((prev) => ({ ...prev, isMale: false }))
                    }
                  />
                  <span className="radio-custom"></span>
                  <span>N·ªØ</span>
                </label>
              </div>
            </div>

            <div className="user-profile__form-group">
              <label>
                <i className="fas fa-map-marker-alt"></i>
                ƒê·ªãa ch·ªâ *
              </label>
              <input
                type="text"
                name="address"
                value={profileData.address}
                onChange={handleProfileChange}
                className={errors.address ? "error" : ""}
                placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
              />
              {errors.address && (
                <span className="error-text">{errors.address}</span>
              )}
            </div>

            {/* üéØ Bank Account Section - Updated labels */}
            <div className="user-profile__bank-section">
              <h3>Th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng (t√πy ch·ªçn)</h3>
              <p className="bank-section-note">
                ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ c·∫≠p nh·∫≠t t√†i kho·∫£n ng√¢n h√†ng
              </p>

              <div className="user-profile__form-row">
                <div className="user-profile__form-group">
                  <label>
                    <i className="fas fa-credit-card"></i>
                    S·ªë t√†i kho·∫£n
                  </label>
                  <input
                    type="text"
                    name="accountNumber"
                    value={profileData.accountNumber}
                    onChange={handleProfileChange}
                    className={errors.accountNumber ? "error" : ""}
                    placeholder="Nh·∫≠p s·ªë t√†i kho·∫£n (t√πy ch·ªçn)"
                  />
                  {errors.accountNumber && (
                    <span className="error-text">{errors.accountNumber}</span>
                  )}
                </div>

                <div className="user-profile__form-group">
                  <label>
                    <i className="fas fa-user-tie"></i>
                    T√™n ch·ªß t√†i kho·∫£n
                  </label>
                  <input
                    type="text"
                    name="accountHolder"
                    value={profileData.accountHolder}
                    onChange={handleProfileChange}
                    className={errors.accountHolder ? "error" : ""}
                    placeholder="Nh·∫≠p t√™n ch·ªß t√†i kho·∫£n (t√πy ch·ªçn)"
                  />
                  {errors.accountHolder && (
                    <span className="error-text">{errors.accountHolder}</span>
                  )}
                </div>
              </div>

              <div className="user-profile__form-group">
                <label>
                  <i className="fas fa-university"></i>
                  Ng√¢n h√†ng
                </label>
                <select
                  name="bankTypeId"
                  value={profileData.bankTypeId}
                  onChange={handleProfileChange}
                  className={errors.bankTypeId ? "error" : ""}
                >
                  <option value={0}>Ch·ªçn ng√¢n h√†ng (t√πy ch·ªçn)</option>
                  {bankTypes.map((bank) => (
                    <option key={bank.bankTypeId} value={bank.bankTypeId}>
                      {bank.bankName}
                      {bank.description && ` - ${bank.description}`}
                    </option>
                  ))}
                </select>
                {errors.bankTypeId && (
                  <span className="error-text">{errors.bankTypeId}</span>
                )}

                {/* Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu bankName t·ª´ server kh√¥ng kh·ªõp v·ªõi danh s√°ch */}
                {profileData.bankName &&
                  !isCurrentBankSelectionValid() &&
                  profileData.bankTypeId === 0 && (
                    <span className="bank-name-display bank-not-matched">
                      <i className="fas fa-exclamation-triangle"></i>
                      Ng√¢n h√†ng t·ª´ h·ªá th·ªëng: "{profileData.bankName}" - Kh√¥ng
                      t√¨m th·∫•y trong danh s√°ch
                    </span>
                  )}
              </div>
            </div>

            <button
              type="submit"
              className="user-profile__submit-btn"
              disabled={loading}
            >
              {loading && <span className="loading-spinner"></span>}
              {loading ? "ƒêang c·∫≠p nh·∫≠t..." : "C·∫≠p nh·∫≠t th√¥ng tin"}
            </button>
          </form>
        )}

        {/* üéØ Password Tab - FINAL VERSION */}
        {activeTab === "password" && (
          <div className="user-profile__password-section">
            {/* Loading state */}
            {!passwordStatus && (
              <div className="password-status-loading">
                <div className="loading-spinner"></div>
                <p>ƒêang ki·ªÉm tra tr·∫°ng th√°i m·∫≠t kh·∫©u...</p>
              </div>
            )}

            {/* Password Form */}
            {passwordStatus && (
              <form
                className="user-profile__form"
                onSubmit={handleChangePassword}
              >
                {/* üéØ Old Password - CH·ªà hi·ªÉn th·ªã khi RequireOldPassword = true */}
                {passwordStatus.RequireOldPassword && (
                  <div className="user-profile__form-group">
                    <label>
                      <i className="fas fa-lock"></i>
                      M·∫≠t kh·∫©u c≈© *
                    </label>
                    <input
                      type="password"
                      name="oldPassword"
                      value={passwordData.oldPassword}
                      onChange={handlePasswordChange}
                      className={errors.oldPassword ? "error" : ""}
                      placeholder="Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"
                      autoComplete="current-password"
                    />
                    {errors.oldPassword && (
                      <span className="error-text">{errors.oldPassword}</span>
                    )}
                  </div>
                )}

                {/* üéØ Notice cho first-time setup */}
                {!passwordStatus.RequireOldPassword && (
                  <div className="password-setup-notice">
                    <i className="fas fa-info-circle"></i>
                    <span>Thi·∫øt l·∫≠p m·∫≠t kh·∫©u l·∫ßn ƒë·∫ßu</span>
                  </div>
                )}

                <div className="user-profile__form-group">
                  <label>
                    <i className="fas fa-key"></i>
                    {passwordStatus.RequireOldPassword
                      ? "M·∫≠t kh·∫©u m·ªõi *"
                      : "M·∫≠t kh·∫©u *"}
                  </label>
                  <input
                    type="password"
                    name="newPassword"
                    value={passwordData.newPassword}
                    onChange={handlePasswordChange}
                    className={errors.newPassword ? "error" : ""}
                    placeholder={
                      passwordStatus.RequireOldPassword
                        ? "Nh·∫≠p m·∫≠t kh·∫©u m·ªõi (√≠t nh·∫•t 8 k√Ω t·ª±)"
                        : "Nh·∫≠p m·∫≠t kh·∫©u (√≠t nh·∫•t 8 k√Ω t·ª±)"
                    }
                    autoComplete="new-password"
                  />
                  {errors.newPassword && (
                    <span className="error-text">{errors.newPassword}</span>
                  )}
                </div>

                <div className="user-profile__form-group">
                  <label>
                    <i className="fas fa-shield-alt"></i>
                    X√°c nh·∫≠n m·∫≠t kh·∫©u *
                  </label>
                  <input
                    type="password"
                    name="confirmPassword"
                    value={passwordData.confirmPassword}
                    onChange={handlePasswordChange}
                    className={errors.confirmPassword ? "error" : ""}
                    placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                    autoComplete="new-password"
                  />
                  {errors.confirmPassword && (
                    <span className="error-text">{errors.confirmPassword}</span>
                  )}
                </div>

                <button
                  type="submit"
                  className="user-profile__submit-btn"
                  disabled={loading}
                >
                  {loading && <span className="loading-spinner"></span>}
                  {loading
                    ? "ƒêang x·ª≠ l√Ω..."
                    : passwordStatus.RequireOldPassword
                    ? "ƒê·ªïi m·∫≠t kh·∫©u"
                    : "Thi·∫øt l·∫≠p m·∫≠t kh·∫©u"}
                </button>
              </form>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default UserProfile;
