import React, { useEffect, useState } from "react";
import { Card, Row, Col, Button, Modal, Form } from "react-bootstrap";
import { DatePicker } from "antd";
import dayjs from "dayjs";
import { useAuth } from '../../contexts/AuthContext';
import {
  getReport,
  getTotalReport,
  exportReportToExcel,
  checkCommission,
  createPaymentOrder, // ‚úÖ TH√äM IMPORT
} from "../../services/apiService";
import "./CourtOwnerDashboard.scss";
import { Chart as ChartJS, registerables } from 'chart.js';
import { Bar, Pie } from 'react-chartjs-2';
import { Pagination } from "antd";
ChartJS.register(...registerables);

const { RangePicker } = DatePicker;

const OwnerDashboard = () => {
  const [dashboardData, setDashboardData] = useState({
    totalFacilities: 0,
    totalCourts: 0,
    totalBookings: 0,
    totalRevenue: 0,
    recentBookings: [],
  });

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [exportLoading, setExportLoading] = useState(false);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [selectedBooking, setSelectedBooking] = useState(null);
  const [selectedMonth, setSelectedMonth] = useState(() => {
    // M·∫∑c ƒë·ªãnh l√† th√°ng hi·ªán t·∫°i
    return new Date();
  });
  const { userId, user, isLoggedIn, isLoading: authLoading } = useAuth();

  // Th√™m state cho ph√¢n trang booking
  const [bookingPagination, setBookingPagination] = useState({
    pageNumber: 1,
    pageSize: 10,
    totalItems: 0,
    totalPages: 0,
  });

  // ‚úÖ TH√äM STATE CHO COMMISSION
  const [commissionExists, setCommissionExists] = useState(true); // M·∫∑c ƒë·ªãnh ·∫©n button
  const [checkingCommission, setCheckingCommission] = useState(false);

  // ‚úÖ TH√äM STATE CHO COMMISSION MODAL
  const [showCommissionModal, setShowCommissionModal] = useState(false);

  // ‚úÖ THAY ƒê·ªîI STATE CHO COMMISSION
  const [showCommissionListModal, setShowCommissionListModal] = useState(false);
  const [monthlyCommissions, setMonthlyCommissions] = useState({});
  const [loadingCommissions, setLoadingCommissions] = useState(false);

  // ‚úÖ TH√äM STATE ƒê·ªÇ THEO D√ïI S·ªê TH√ÅNG C·∫¶N T·∫†O COMMISSION
  const [pendingCommissionCount, setPendingCommissionCount] = useState(0);

  // H√†m l·∫•y ng√†y ƒë·∫ßu v√† cu·ªëi th√°ng t·ª´ selectedMonth
  const getMonthRange = (dateObj) => {
    const year = dateObj.getFullYear();
    const month = dateObj.getMonth();
    const start = new Date(year, month, 1, 0, 0, 0, 0);
    const end = new Date(year, month + 1, 0, 23, 59, 59, 999);
    return [start, end];
  };


  // ‚úÖ H√ÄM KI·ªÇM TRA COMMISSION CHO NHI·ªÄU TH√ÅNG - S·ª¨A L·∫†I
  const checkMultipleMonthsCommission = async () => {
    if (!userId) return;

    try {
      setLoadingCommissions(true);
      const currentDate = new Date();
      const currentMonth = currentDate.getMonth() + 1; // getMonth() tr·∫£ v·ªÅ 0-11
      const currentYear = currentDate.getFullYear();
      const commissionStatus = {};
      let pendingCount = 0; // ‚úÖ BI·∫æN ƒê·∫æM S·ªê TH√ÅNG C·∫¶N T·∫†O

      // ‚úÖ CH·ªà KI·ªÇM TRA C√ÅC TH√ÅNG ƒê√É QUA (KH√îNG BAO G·ªíM TH√ÅNG HI·ªÜN T·∫†I)
      for (let month = 1; month < currentMonth; month++) {
        try {
          console.log(`üîç Checking commission for month ${month}/${currentYear}`);
          
          // ‚úÖ KI·ªÇM TRA COMMISSION STATUS
          const commissionResponse = await checkCommission(userId, month, currentYear);
          
          // ‚úÖ KI·ªÇM TRA DOANH THU
          const selectedDate = new Date(currentYear, month - 1, 1);
          const [start, end] = getMonthRange(selectedDate);
          const revenueResponse = await getTotalReport(userId, start, end);
          
          const hasRevenue = revenueResponse?.success && (revenueResponse.data?.totalCost || 0) > 0;
          const hasCommission = revenueResponse?.success && (revenueResponse.data?.commissionPayment || 0) > 0;
          const commissionExists = commissionResponse?.exists || false;

          // ‚úÖ X√ÅC ƒê·ªäNH TR·∫†NG TH√ÅI
          let status = 'no-revenue';
          if (hasRevenue && hasCommission) {
            if (commissionExists) {
              status = 'paid';
            } else {
              status = 'pending'; // ‚úÖ C·∫¶N T·∫†O COMMISSION
              pendingCount++; // ‚úÖ TƒÇNG COUNTER
            }
          } else if (hasRevenue && !hasCommission) {
            status = 'no-commission';
          }

          commissionStatus[`${month}-${currentYear}`] = {
            month,
            year: currentYear,
            exists: commissionExists,
            hasRevenue,
            hasCommission,
            status, // ‚úÖ TH√äM STATUS
            revenue: revenueResponse?.data?.totalCost || 0,
            commission: revenueResponse?.data?.commissionPayment || 0
          };

          console.log(`‚úÖ Month ${month}: Status = ${status}`);
          
        } catch (error) {
          console.error(`‚ùå Month ${month} error:`, error);
          commissionStatus[`${month}-${currentYear}`] = {
            month,
            year: currentYear,
            exists: false,
            hasRevenue: false,
            hasCommission: false,
            status: 'no-revenue',
            revenue: 0,
            commission: 0
          };
        }
      }

      // ‚úÖ TH√äM C√ÅC TH√ÅNG T∆Ø∆†I LAI V√Ä TR·∫†NG TH√ÅI M·∫∂C ƒê·ªäNH
      for (let month = currentMonth; month <= 12; month++) {
        commissionStatus[`${month}-${currentYear}`] = {
          month,
          year: currentYear,
          exists: false,
          status: 'future',
          isFuture: true,
          revenue: 0,
          commission: 0
        };
      }

      console.log(`üìã Final commission status:`, commissionStatus);
      console.log(`üî• Pending commission count: ${pendingCount}`);
      
      setMonthlyCommissions(commissionStatus);
      setPendingCommissionCount(pendingCount); // ‚úÖ C·∫¨P NH·∫¨T COUNTER
    
    } catch (error) {
      console.error("Error checking multiple months commission:", error);
    } finally {
      setLoadingCommissions(false);
    }
  };

  // ‚úÖ T·∫†O H√ÄM RI√äNG CH·ªà ƒê·ªÇ ƒê·∫æM PENDING COMMISSION (KH√îNG LOAD CHI TI·∫æT)
  const checkPendingCommissionCount = async () => {
    if (!userId) return;

    try {
      const currentDate = new Date();
      const currentMonth = currentDate.getMonth() + 1;
      const currentYear = currentDate.getFullYear();
      let pendingCount = 0;

      // ‚úÖ CH·ªà KI·ªÇM TRA C√ÅC TH√ÅNG ƒê√É QUA V√Ä ƒê·∫æM PENDING
      for (let month = 1; month < currentMonth; month++) {
        try {
          // ‚úÖ KI·ªÇM TRA COMMISSION STATUS
          const commissionResponse = await checkCommission(userId, month, currentYear);
          
          // ‚úÖ KI·ªÇM TRA DOANH THU
          const selectedDate = new Date(currentYear, month - 1, 1);
          const [start, end] = getMonthRange(selectedDate);
          const revenueResponse = await getTotalReport(userId, start, end);
          
          const hasRevenue = revenueResponse?.success && (revenueResponse.data?.totalCost || 0) > 0;
          const hasCommission = revenueResponse?.success && (revenueResponse.data?.commissionPayment || 0) > 0;
          const commissionExists = commissionResponse?.exists || false;

          // ‚úÖ CH·ªà ƒê·∫æM NH·ªÆNG TH√ÅNG C√ì COMMISSION NH∆ØNG CH∆ØA THANH TO√ÅN
          if (hasRevenue && hasCommission && !commissionExists) {
            pendingCount++;
          }
          
        } catch (error) {
          console.error(`‚ùå Month ${month} error:`, error);
        }
      }

      console.log(`üî• Quick check - Pending commission count: ${pendingCount}`);
      setPendingCommissionCount(pendingCount);
      
    } catch (error) {
      console.error("Error checking pending commission count:", error);
    }
  };

  useEffect(() => {
    const fetchDashboardData = async () => {
      setError(null);
      setLoading(true);

      try {
        // ‚úÖ FETCH DASHBOARD DATA TR∆Ø·ªöC
        const [start, end] = getMonthRange(selectedMonth);

        const totalReportResponse = await getTotalReport(userId, start, end);

        if (totalReportResponse && totalReportResponse.success) {
          setDashboardData((prev) => ({
            ...prev,
            totalFacilities: totalReportResponse.data?.totalFacility || 0,
            totalCourts: totalReportResponse.data?.totalCourt || 0,
            totalBookings: totalReportResponse.data?.totalBooking || 0,
            totalRevenue: totalReportResponse.data?.totalCost || 0,
            commissionPayment: totalReportResponse.data?.commissionPayment || 0
          }));
        } else {
          setError(totalReportResponse?.message || "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ªïng quan");
        }

        // Fetch recent bookings v·ªõi ph√¢n trang
        try {
          const reportResponse = await getReport(
            userId,
            start,
            end,
            null,
            bookingPagination.pageNumber,
            bookingPagination.pageSize
          );

          if (reportResponse && reportResponse.success) {
            setDashboardData((prev) => ({
              ...prev,
              recentBookings: reportResponse.data?.items || [],
            }));
            setBookingPagination((prev) => ({
              ...prev,
              totalItems: reportResponse.data?.totalItems || 0,
              totalPages: reportResponse.data?.totalPages || 0,
            }));
          } else {
            console.warn("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ƒë∆°n ƒë·∫∑t s√¢n:", reportResponse?.message);
          }
        } catch (reportError) {
          console.error("Error fetching recent bookings:", reportError);
        }

        // ‚úÖ KI·ªÇM TRA PENDING COMMISSION SAU KHI LOAD XONG DASHBOARD
        await checkPendingCommissionCount();
        
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
        setError(error.message || "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu dashboard");
      } finally {
        setLoading(false);
      }
    };

    if (userId && !authLoading && isLoggedIn) {
      fetchDashboardData();
    } else if (!authLoading && !isLoggedIn) {
      setLoading(false);
      setError("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem dashboard");
    }
  }, [userId, authLoading, isLoggedIn, selectedMonth, bookingPagination.pageNumber, bookingPagination.pageSize]);


  const handleExportExcel = async () => {
    setExportLoading(true);
    try {
      // L·∫•y ng√†y ƒë·∫ßu v√† cu·ªëi th√°ng t·ª´ selectedMonth
      const [startDate, endDate] = getMonthRange(selectedMonth);

      const response = await exportReportToExcel(
        userId,
        startDate, // Ng√†y b·∫Øt ƒë·∫ßu
        endDate,   // Ng√†y k·∫øt th√∫c
        null,      // facilityId (n·∫øu c·∫ßn)
        1          // pageNumber
      );

      // Ki·ªÉm tra n·∫øu response kh√¥ng ph·∫£i l√† ArrayBuffer
      if (!response || !(response instanceof ArrayBuffer)) {
        throw new Error("D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá");
      }

      // Ki·ªÉm tra magic number
      const header = new Uint8Array(response.slice(0, 4));
      if (
        header[0] !== 0x50 ||
        header[1] !== 0x4b ||
        header[2] !== 0x03 ||
        header[3] !== 0x04
      ) {
        throw new Error("D·ªØ li·ªáu kh√¥ng ph·∫£i file Excel h·ª£p l·ªá");
      }

      // T·∫°o blob v·ªõi MIME type ch√≠nh x√°c
      const blob = new Blob([response], {
        type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      });

      const now = new Date();
      const formattedDate = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(
        2,
        "0"
      )}-${String(now.getDate()).padStart(2, "0")}`;
      const formattedTime = `${String(now.getHours()).padStart(2, "0")}h${String(
        now.getMinutes()
      ).padStart(2, "0")}m${String(now.getSeconds()).padStart(2, "0")}s`;

      // T·∫°o URL t·∫°m
      const url = URL.createObjectURL(blob);

      // T·∫°o th·∫ª a ·∫©n ƒë·ªÉ t·∫£i xu·ªëng
      const a = document.createElement("a");
      a.href = url;
      a.download = `Report_${formattedDate}_${formattedTime}.xlsx`;
      document.body.appendChild(a);
      a.click();

      // D·ªçn d·∫πp
      setTimeout(() => {
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }, 100);
    } catch (error) {
      console.error("L·ªói khi xu·∫•t Excel:", error);
      alert("L·ªói: " + error.message);
    } finally {
      setExportLoading(false);
    }
  };

  const handleViewDetail = (booking) => {
    setSelectedBooking(booking);
    setShowDetailModal(true);
  };

  // Handler ƒë·ªïi trang
  const handleBookingPageChange = (page, pageSize) => {
    setBookingPagination((prev) => ({
      ...prev,
      pageNumber: page,
      pageSize: pageSize || prev.pageSize,
    }));
  };

  // Handler ƒë·ªïi pageSize
  const handleBookingPageSizeChange = (current, size) => {
    setBookingPagination((prev) => ({
      ...prev,
      pageNumber: 1, // Reset v·ªÅ trang 1 khi ƒë·ªïi pageSize
      pageSize: size,
    }));
  };

  // X·ª≠ l√Ω khi ch·ªçn th√°ng m·ªõi
  const handleMonthChange = (date) => {
    if (date) {
      setSelectedMonth(date.toDate());
    }
  };

  const prepareChartData = () => {
    const revenueByCourtType = {};
    const statusDistribution = {};

    dashboardData.recentBookings.forEach(booking => {
      // CH·ªà T√çNH DOANH THU N·∫æU ƒê√É THANH TO√ÅN
      const isPaid = booking.bookingStatus === "ƒê√£ ho√†n th√†nh";

      if (booking.courtCategories && booking.totalPrice && isPaid) {
        const courtTypes = booking.courtCategories.split(', ').filter(type => type.trim());
        const courtCount = courtTypes.length;

        if (courtCount > 0) {
          const revenuePerCourt = booking.totalPrice / courtCount;

          courtTypes.forEach(type => {
            const courtType = type.trim();
            if (courtType) {
              if (!revenueByCourtType[courtType]) {
                revenueByCourtType[courtType] = 0;
              }
              revenueByCourtType[courtType] += revenuePerCourt;
            }
          });
        }
      }

      // Ph·∫ßn status distribution v·∫´n t√≠nh t·∫•t c·∫£
      if (booking.bookingStatus) {
        if (!statusDistribution[booking.bookingStatus]) {
          statusDistribution[booking.bookingStatus] = 0;
        }
        statusDistribution[booking.bookingStatus]++;
      }
    });

    return {
      revenueData: {
        labels: Object.keys(revenueByCourtType),
        datasets: [{
          label: 'Doanh thu (VND)',
          data: Object.values(revenueByCourtType),
          backgroundColor: 'rgba(54, 162, 235, 0.5)',
          borderColor: 'rgba(54, 162, 235, 1)',
          borderWidth: 1
        }]
      },
      statusData: {
        labels: Object.keys(statusDistribution),
        datasets: [{
          data: Object.values(statusDistribution),
          backgroundColor: [
            'rgba(75, 192, 192, 0.5)',
            'rgba(255, 206, 86, 0.5)',
            'rgba(255, 99, 132, 0.5)'
          ],
          borderColor: [
            'rgba(75, 192, 192, 1)',
            'rgba(255, 206, 86, 1)',
            'rgba(255, 99, 132, 1)'
          ],
          borderWidth: 1
        }]
      }
    };
  };


  const BookingDetailModal = ({ booking, show, onHide }) => {
    if (!booking) return null;


    return (
      <Modal show={show} onHide={onHide} size="lg">
        <Modal.Header closeButton className="detail-header">
          <Modal.Title>
            <i className="fas fa-info-circle me-2"></i>
            Chi ti·∫øt ƒë∆°n ƒë·∫∑t s√¢n #{booking.bookingId}
          </Modal.Title>
        </Modal.Header>
        <Modal.Body className="booking-detail-body">
          <div className="booking-detail-content">
            <div className="detail-section">
              <h5>
                <i className="fas fa-user me-2"></i>Th√¥ng tin kh√°ch h√†ng
              </h5>
              <Row>
                <Col md={6}>
                  <div className="detail-item">
                    <label>T√™n kh√°ch h√†ng:</label>
                    <span>{booking.customerName}</span>
                  </div>
                  <div className="detail-item">
                    <label>Email:</label>
                    <span>{booking.customerEmail}</span>
                  </div>
                </Col>
                <Col md={6}>
                  <div className="detail-item">
                    <label>S·ªë ƒëi·ªán tho·∫°i:</label>
                    <span>{booking.customerPhone}</span>
                  </div>
                </Col>
              </Row>
            </div>

            <div className="detail-section">
              <h5>
                <i className="fas fa-calendar-alt me-2"></i>Th√¥ng tin ƒë·∫∑t s√¢n
              </h5>
              <Row>
                <Col md={6}>
                  <div className="detail-item">
                    <label>Ng√†y check-in:</label>
                    <span>{booking.checkInDate}</span>
                  </div>
                  <div className="detail-item">
                    <label>Th·ªùi gian ƒë·∫∑t:</label>
                    <span>
                      {new Date(booking.bookingTime).toLocaleString("vi-VN")}
                    </span>
                  </div>
                </Col>
                <Col md={6}>
                  <div className="detail-item">
                    <label>S·ªë l∆∞·ª£t ƒë·∫∑t:</label>
                    <span>{booking.timeSlotCount}</span>
                  </div>
                </Col>
              </Row>
              <div className="detail-item">
                <label>Lo·∫°i s√¢n:</label>
                <span>{booking.courtCategories}</span>
              </div>
            </div>

            <div className="detail-section">
              <h5>
                <i className="fas fa-money-bill-wave me-2"></i>Th√¥ng tin thanh
                to√°n
              </h5>
              <Row>
                <Col md={6}>
                  <div className="detail-item">
                    <label>T·ªïng ti·ªÅn:</label>
                    <span className="price">
                      {formatPrice(booking.totalPrice)}ƒë
                    </span>
                  </div>

                </Col>
                <Col md={6}>
                  <div className="detail-item">
                    <label>Tr·∫°ng th√°i ƒë·∫∑t s√¢n:</label>
                    <span
                      className={`status-badge ${getStatusClass(
                        booking.bookingStatus
                      )}`}
                    >
                      {booking.bookingStatus}
                    </span>
                  </div>
                </Col>
              </Row>
              {booking.paymentTime && (
                <div className="detail-item">
                  <label>Th·ªùi gian thanh to√°n:</label>
                  <span>
                    {new Date(booking.paymentTime).toLocaleString("vi-VN")}
                  </span>
                </div>
              )}
            </div>
          </div>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={onHide}>
            <i className="fas fa-times me-2"></i>
            ƒê√≥ng
          </Button>
        </Modal.Footer>
      </Modal>
    );
  };

  // ‚úÖ H√ÄM M·ªû MODAL COMMISSION
  const handleCreateCommissionClick = () => {
    setShowCommissionModal(true);
  };

  // ‚úÖ H√ÄM ƒê√ìNG MODAL
  const handleCloseCommissionModal = () => {
    setShowCommissionModal(false);
  };

  // ‚úÖ H√ÄM M·ªû MODAL DANH S√ÅCH COMMISSION
  const handleShowCommissionList = async () => {
    setShowCommissionListModal(true);
    
    // ‚úÖ CH·ªà LOAD CHI TI·∫æT KHI M·ªû MODAL (N·∫æU CH∆ØA C√ì D·ªÆ LI·ªÜU)
    if (Object.keys(monthlyCommissions).length === 0) {
      await checkMultipleMonthsCommission();
    }
  };

  // ‚úÖ H√ÄM ƒê√ìNG MODAL DANH S√ÅCH COMMISSION
  const handleCloseCommissionList = () => {
    setShowCommissionListModal(false);
  };

  // ‚úÖ H√ÄM T·∫†O COMMISSION CHO TH√ÅNG C·ª§ TH·ªÇ
  const handleCreateCommissionForMonth = async (month, year) => {
    try {
      // ‚úÖ ·∫®N MODAL DANH S√ÅCH COMMISSION TR∆Ø·ªöC
      setShowCommissionListModal(false);
      
      // ‚úÖ SET TH√ÅNG ƒê√É CH·ªåN V√ÄO selectedMonth
      const selectedDate = new Date(year, month - 1, 1); // month - 1 v√¨ Date() d√πng 0-11
      setSelectedMonth(selectedDate);
      
      // ‚úÖ FETCH D·ªÆ LI·ªÜU DOANH THU CHO TH√ÅNG ƒê√É CH·ªåN
      const [start, end] = getMonthRange(selectedDate);
      
      console.log(`üîç Fetching revenue data for ${month}/${year}`);
      
      const totalReportResponse = await getTotalReport(userId, start, end);
      
      if (totalReportResponse && totalReportResponse.success) {
        const revenue = totalReportResponse.data?.totalCost || 0;
        const commission = totalReportResponse.data?.commissionPayment || 0;
        
        console.log(`üìä Revenue data for ${month}/${year}:`, {
          revenue,
          commission
        });

        // ‚úÖ KI·ªÇM TRA DOANH THU V√Ä COMMISSION
        if (revenue <= 0 || commission <= 0) {
          // ‚úÖ HI·ªÇN TH·ªä L·∫†I MODAL DANH S√ÅCH
          setShowCommissionListModal(true);
          
          // ‚úÖ HI·ªÇN TH·ªä TH√îNG B√ÅO T√ôY THEO TR∆Ø·ªúNG H·ª¢P
          if (revenue <= 0) {
            alert(`üìä Th√°ng ${month}/${year} kh√¥ng c√≥ doanh thu!\n\nKh√¥ng c·∫ßn t·∫°o commission cho th√°ng n√†y.`);
          } else if (commission <= 0) {
            alert(`üìä Th√°ng ${month}/${year} kh√¥ng c√≥ commission c·∫ßn thanh to√°n!\n\nDoanh thu: ${formatPrice(revenue)}ƒë\nCommission: 0ƒë`);
          }
          
          return; // ‚úÖ D·ª™NG X·ª¨ L√ù
        }
        
        // ‚úÖ C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU CHO TH√ÅNG ƒê√É CH·ªåN (CH·ªà KHI C√ì DOANH THU)
        setDashboardData((prev) => ({
          ...prev,
          totalRevenue: revenue,
          commissionPayment: commission
        }));
        
        // ‚úÖ M·ªû MODAL COMMISSION SAU KHI ·∫®N MODAL LIST
        setTimeout(() => {
          setShowCommissionModal(true);
        }, 300); // Delay nh·ªè ƒë·ªÉ smooth transition
        
        console.log(`‚úÖ Opened commission modal for ${month}/${year} with commission: ${formatPrice(commission)}ƒë`);
        
      } else {
        // ‚úÖ N·∫æU L·ªñI, HI·ªÇN TH·ªä L·∫†I MODAL DANH S√ÅCH
        setShowCommissionListModal(true);
        alert("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu doanh thu cho th√°ng n√†y!");
      }
      
    } catch (error) {
      console.error("Error fetching commission data:", error);
      // ‚úÖ N·∫æU L·ªñI, HI·ªÇN TH·ªä L·∫†I MODAL DANH S√ÅCH
      setShowCommissionListModal(true);
      alert("C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu: " + error.message);
    }
  };

  // ‚úÖ COMPONENT MODAL DANH S√ÅCH COMMISSION - S·ª¨A L·∫†I
  const CommissionListModal = ({ show, onHide }) => {
    const monthNames = [
      'Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5', 'Th√°ng 6',
      'Th√°ng 7', 'Th√°ng 8', 'Th√°ng 9', 'Th√°ng 10', 'Th√°ng 11', 'Th√°ng 12'
    ];

    const currentDate = new Date();
    const currentMonth = currentDate.getMonth() + 1;
    const currentYear = currentDate.getFullYear();

    return (
      <Modal show={show} onHide={onHide} size="lg" centered>
        <Modal.Header closeButton className="commission-modal-header">
          <Modal.Title>
            <i className="fas fa-list me-2"></i>
            Qu·∫£n l√Ω Commission theo th√°ng
            {pendingCommissionCount > 0 && (
              <span className="pending-count-badge ms-2">
                {pendingCommissionCount} th√°ng c·∫ßn thanh to√°n
              </span>
            )}
          </Modal.Title>
        </Modal.Header>
        <Modal.Body className="commission-list-body">
          {loadingCommissions ? (
            <div className="loading-container">
              <i className="fas fa-spinner fa-spin me-2"></i>
              ƒêang ki·ªÉm tra tr·∫°ng th√°i commission...
            </div>
          ) : (
            <div className="commission-grid">
              {monthNames.map((monthName, index) => {
                const month = index + 1;
                const year = currentYear;
                const key = `${month}-${year}`;
                const commissionData = monthlyCommissions[key];
                const isFutureMonth = month >= currentMonth;

                if (!commissionData) return null;

                const { status, revenue, commission, exists } = commissionData;

                return (
                  <div 
                    key={key} 
                    className={`commission-month-card ${status}`}
                  >
                    <div className="month-header">
                      <h6>{monthName} {year}</h6>
                      {/* ‚úÖ HI·ªÇN TH·ªä ICON TR·∫†NG TH√ÅI */}
                      <div className="status-icon">
                        {status === 'pending' && <i className="fas fa-exclamation-circle text-danger"></i>}
                        {status === 'paid' && <i className="fas fa-check-circle text-success"></i>}
                        {status === 'no-revenue' && <i className="fas fa-minus-circle text-muted"></i>}
                        {status === 'no-commission' && <i className="fas fa-info-circle text-info"></i>}
                        {status === 'future' && <i className="fas fa-clock text-secondary"></i>}
                      </div>
                      
                      {/* ‚úÖ HI·ªÇN TH·ªä TH√îNG TIN DOANH THU */}
                      {!isFutureMonth && revenue > 0 && (
                        <div className="revenue-info">
                          <small>DT: {formatPrice(revenue)}ƒë</small>
                          {commission > 0 && (
                            <small>Commission: {formatPrice(commission)}ƒë</small>
                          )}
                        </div>
                      )}
                    </div>
                    
                    <div className="month-status">
                      {status === 'future' ? (
                        <div className="status-badge status-future">
                          <i className="fas fa-clock me-2"></i>
                          Ch∆∞a ƒë·∫øn th·ªùi gian
                        </div>
                      ) : status === 'no-revenue' ? (
                        <div className="status-badge status-no-revenue">
                          <i className="fas fa-minus-circle me-2"></i>
                          Kh√¥ng c√≥ doanh thu
                        </div>
                      ) : status === 'no-commission' ? (
                        <div className="status-badge status-no-commission">
                          <i className="fas fa-info-circle me-2"></i>
                          Kh√¥ng c√≥ commission
                        </div>
                      ) : status === 'paid' ? (
                        <div className="status-badge status-paid">
                          <i className="fas fa-check-circle me-2"></i>
                          ƒê√£ thanh to√°n
                        </div>
                      ) : status === 'pending' ? (
                        <Button
                          variant="danger"
                          size="sm"
                          onClick={() => handleCreateCommissionForMonth(month, year)}
                          className="create-commission-btn pending-btn"
                        >
                          <i className="fas fa-exclamation-triangle me-2"></i>
                          C·∫ßn thanh to√°n ngay!
                        </Button>
                      ) : null}
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </Modal.Body>
        <Modal.Footer className="commission-modal-footer">
          <Button variant="secondary" onClick={onHide}>
            <i className="fas fa-times me-2"></i>
            ƒê√≥ng
          </Button>
          {pendingCommissionCount > 0 && (
            <div className="footer-warning">
              <i className="fas fa-exclamation-triangle me-2"></i>
              B·∫°n c√≥ {pendingCommissionCount} th√°ng c·∫ßn thanh to√°n commission
            </div>
          )}
        </Modal.Footer>
      </Modal>
    );
  };

  // ‚úÖ COMPONENT MODAL THANH TO√ÅN COMMISSION - C·∫¨P NH·∫¨T
  const CommissionModal = ({ show, onHide }) => {
    const commissionAmount = dashboardData.commissionPayment;
    const month = selectedMonth.getMonth() + 1;
    const year = selectedMonth.getFullYear();

    // ‚úÖ H√ÄM X·ª¨ L√ù THANH TO√ÅN
    const handlePayment = async () => {
      try {
        const commissionAmount = dashboardData.commissionPayment;
        const month = selectedMonth.getMonth() + 1;
        const year = selectedMonth.getFullYear();
        
        console.log(`üí≥ Processing payment for ${month}/${year}: ${commissionAmount}ƒë`);
        
        // ‚úÖ KI·ªÇM TRA D·ªÆ LI·ªÜU TR∆Ø·ªöC KHI G·ª¨I
        if (!userId) {
          throw new Error("Kh√¥ng t√¨m th·∫•y userId");
        }
        
        if (!commissionAmount || commissionAmount <= 0) {
          throw new Error("S·ªë ti·ªÅn commission kh√¥ng h·ª£p l·ªá");
        }
        
        // ‚úÖ S·ª¨A L·∫†I C·∫§U TR√öC D·ªÆ LI·ªÜU THEO Y√äU C·∫¶U API
        const paymentData = {
          amount: commissionAmount,
          description: `Thanh to√°n ti·ªÅn hoa h·ªìng th√°ng ${month}/${year}`,
          appUser: userId?.toString() || user?.userId?.toString(),
          embedData: {
            forMonth: month.toString(),
            forYear: year.toString()
          }
        };

        console.log("üì§ Payment request data:", JSON.stringify(paymentData, null, 2));

        // ‚úÖ G·ªåI API T·∫†O ƒê∆†N THANH TO√ÅN
        console.log("üöÄ Calling createPaymentOrder API...");
        const paymentResponse = await createPaymentOrder(paymentData);
        
        console.log("üì• Full payment response:", paymentResponse);

        // ‚úÖ S·ª¨A L·∫†I: KI·ªÇM TRA RESPONSE TR·ª∞C TI·∫æP (KH√îNG C·∫¶N .status V√Ä .data)
        // V√¨ axios interceptor c√≥ th·ªÉ ƒë√£ x·ª≠ l√Ω v√† tr·∫£ v·ªÅ response.data tr·ª±c ti·∫øp
        if (paymentResponse && paymentResponse.success) {
          console.log("‚úÖ Payment API returned success=true");
          
          // ‚úÖ KI·ªÇM TRA order_url TR·ª∞C TI·∫æP TRONG paymentResponse
          if (paymentResponse.data && paymentResponse.data.order_url) {
            console.log("‚úÖ Payment order created successfully");
            console.log("üîó Opening payment page:", paymentResponse.data.order_url);
            
            // ‚úÖ M·ªû TAB M·ªöI
            const paymentWindow = window.open(
              paymentResponse.data.order_url, 
              '_blank', 
              'noopener,noreferrer'
            );
            // ‚úÖ ƒê√ìNG MODAL SAU KHI M·ªû THANH TO√ÅN
            setShowCommissionModal(false);
            
            
          } else {
            console.error("‚ùå Missing order_url in response:", paymentResponse);
            alert("Kh√¥ng th·ªÉ t·∫°o ƒë∆°n thanh to√°n: Thi·∫øu ƒë∆∞·ªùng link thanh to√°n");
          }
        } else {
          console.error("‚ùå Payment creation failed:", paymentResponse);
          const errorMsg = paymentResponse?.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ API";
          alert("Kh√¥ng th·ªÉ t·∫°o ƒë∆°n thanh to√°n: " + errorMsg);
        }
        
      } catch (error) {
        console.error("‚ùå Error processing payment:", error);
        
        let errorMessage = "C√≥ l·ªói x·∫£y ra khi thanh to√°n: ";
        
        if (error.response) {
          // ‚úÖ API tr·∫£ v·ªÅ l·ªói HTTP
          console.error("‚ùå HTTP Error response:", error.response);
          const responseData = error.response.data;
          
          if (responseData && responseData.message) {
            errorMessage += responseData.message;
          } else if (responseData && typeof responseData === 'string') {
            errorMessage += responseData;
          } else {
            errorMessage += `HTTP ${error.response.status}`;
          }
          
        } else if (error.request) {
          console.error("‚ùå Network Error:", error.request);
          errorMessage += "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server";
        } else {
          console.error("‚ùå Other Error:", error);
          errorMessage += error.message;
        }
        
        alert(errorMessage);
      }
    };

    // ‚úÖ H√ÄM X·ª¨ L√ù H·ª¶Y - QUAY L·∫†I MODAL DANH S√ÅCH
    const handleCancel = () => {
      setShowCommissionModal(false);
      setTimeout(() => {
        setShowCommissionListModal(true);
      }, 300);
    };

    return (
      <Modal show={show} onHide={handleCancel} size="md" centered>
        <Modal.Header closeButton className="commission-modal-header">
          <Modal.Title>
            <i className="fas fa-percentage me-2"></i>
            Thanh to√°n Commission - Th√°ng {month}/{year}
          </Modal.Title>
        </Modal.Header>
        <Modal.Body className="commission-modal-body">
          <div className="commission-info">
            <div className="info-section">
              <h5>
                <i className="fas fa-info-circle me-2"></i>
                Th√¥ng tin Commission
              </h5>
              <div className="info-grid">
                <div className="info-item">
                  <label>Th√°ng/NƒÉm:</label>
                  <span className="value">{month}/{year}</span>
                </div>
                <div className="info-item">
                  <label>Ch·ªß s√¢n:</label>
                  <span className="value">{user?.fullName || 'N/A'}</span>
                </div>
                <div className="info-item">
                  <label>T·ªïng doanh thu:</label>
                  <span className="value revenue">{formatPrice(dashboardData.totalRevenue)}ƒë</span>
                </div>
                <div className="info-item">
                  <label>T·ª∑ l·ªá commission:</label>
                  <span className="value percentage">5%</span>
                </div>
              </div>
            </div>

            <div className="payment-section">
              <h5>
                <i className="fas fa-money-bill-wave me-2"></i>
                Th√¥ng tin thanh to√°n
              </h5>
              <div className="payment-amount">
                <label>S·ªë ti·ªÅn c·∫ßn thanh to√°n:</label>
                <div className="amount-display">
                  {formatPrice(commissionAmount)}ƒë
                </div>
              </div>

              <div className="payment-note">
                <i className="fas fa-exclamation-triangle me-2"></i>
                <small>
                  Commission s·∫Ω ƒë∆∞·ª£c t√≠nh d·ª±a tr√™n 5% t·ªïng doanh thu c·ªßa th√°ng {month}/{year}
                </small>
              </div>
            </div>

            <div className="calculation-breakdown">
              <h6>Chi ti·∫øt t√≠nh to√°n:</h6>
              <div className="breakdown-item">
                <span>Doanh thu th√°ng {month}/{year}:</span>
                <span>{formatPrice(dashboardData.totalRevenue)}ƒë</span>
              </div>
              <div className="breakdown-item">
                <span>Commission (5%):</span>
                <span>{formatPrice(commissionAmount)}ƒë</span>
              </div>
              <hr />
              <div className="breakdown-total">
                <span><strong>T·ªïng c·∫ßn thanh to√°n:</strong></span>
                <span className="total-amount"><strong>{formatPrice(commissionAmount)}ƒë</strong></span>
              </div>
            </div>
          </div>
        </Modal.Body>
        <Modal.Footer className="commission-modal-footer">
          <Button variant="secondary" onClick={handleCancel}>
            <i className="fas fa-arrow-left me-2"></i>
            Quay l·∫°i
          </Button>
          <Button
            variant="primary"
            className="confirm-payment-btn"
            disabled={commissionAmount <= 0}
            onClick={handlePayment}
          >
            <i className="fas fa-credit-card me-2"></i>
            Thanh to√°n {formatPrice(commissionAmount)}ƒë
          </Button>
        </Modal.Footer>
      </Modal>
    );
  };

  // Hi·ªÉn th·ªã loading khi ƒëang x√°c th·ª±c
  if (authLoading) {
    return <div className="loading-spinner">ƒêang x√°c th·ª±c...</div>;
  }

  // Hi·ªÉn th·ªã y√™u c·∫ßu ƒëƒÉng nh·∫≠p
  if (!isLoggedIn) {
    return <div className="error-alert">Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem dashboard</div>;
  }

  if (loading) {
    return <div className="loading-spinner">ƒêang t·∫£i d·ªØ li·ªáu...</div>;
  }

  return (
    <div className="owner-dashboard">
      {error && (
        <div className="error-alert">
          <i className="fas fa-exclamation-circle"></i>
          <span className="error-text">{error}</span>
          <Button
            variant="link"
            size="sm"
            onClick={() => window.location.reload()}
            className="ms-2"
          >
            Th·ª≠ l·∫°i
          </Button>
        </div>
      )}

      <div className="dashboard-header">
        <div>
          <h2 className="dashboard-title">Xin Ch√†o, {user?.fullName || 'Ch·ªß s√¢n'}</h2>
          <p className="dashboard-subtitle">
            ƒê√¢y l√† trang web qu·∫£n l√Ω d√†nh cho ch·ªß s√¢n
          </p>
        </div>
        <div className="d-flex align-items-center gap-3">
          <DatePicker
            picker="month"
            onChange={handleMonthChange}
            format="MM/YYYY"
            placeholder="Ch·ªçn th√°ng"
            allowClear={false}
            value={selectedMonth ? dayjs(selectedMonth) : null}
            style={{ width: "180px" }}
          />

          {/* ‚úÖ COMMISSION BUTTON V·ªöI NOTIFICATION BADGE */}
          <div className="commission-button-container">
            <Button
              variant={pendingCommissionCount > 0 ? "danger" : "warning"}
              className={`manage-commission-btn ${pendingCommissionCount > 0 ? 'has-pending' : ''}`}
              onClick={handleShowCommissionList}
              disabled={checkingCommission}
            >
              <i className="fas fa-percentage me-2"></i>
              Commission
              {pendingCommissionCount > 0 && (
                <span className="commission-badge">
                  {pendingCommissionCount}
                </span>
              )}
            </Button>
            
            {/* ‚úÖ TH√îNG B√ÅO N·∫æU C√ì COMMISSION C·∫¶N THANH TO√ÅN */}
            {pendingCommissionCount > 0 && (
              <div className="commission-alert">
                <i className="fas fa-exclamation-triangle"></i>
                <span>C√≥ {pendingCommissionCount} th√°ng ch∆∞a thanh to√°n commission!</span>
              </div>
            )}
          </div>

          <Button
            variant="success"
            className="export-excel-btn"
            onClick={handleExportExcel}
            disabled={exportLoading}
          >
            {exportLoading ? (
              <>
                <i className="fas fa-spinner fa-spin me-2"></i>
                ƒêang xu·∫•t file...
              </>
            ) : (
              <>
                <i className="fas fa-file-excel me-2"></i>
                Export Excel
              </>
            )}
          </Button>
        </div>
      </div>

      {/* ‚úÖ HI·ªÇN TH·ªä TR·∫†NG TH√ÅI COMMISSION (T√πy ch·ªçn) */}
      {checkingCommission && (
        <div className="commission-status mb-3">
          <i className="fas fa-spinner fa-spin me-2"></i>
          ƒêang ki·ªÉm tra commission...
        </div>
      )}

      <Row className="stats-row">
        <Col md={3}>
          <Card className="stat-card">
            <Card.Body>
              <Card.Title>S·ªë C∆° S·ªü Hi·ªán T·∫°i</Card.Title>
              <Card.Text className="stat-value">
                {dashboardData.totalFacilities}
              </Card.Text>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="stat-card">
            <Card.Body>
              <Card.Title>T·ªïng S·ªë ƒê∆°n Th√°ng N√†y</Card.Title>
              <Card.Text className="stat-value">
                {dashboardData.totalBookings}
              </Card.Text>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="stat-card">
            <Card.Body>
              <Card.Title>S·ªë S√¢n Hi·ªán T·∫°i</Card.Title>
              <Card.Text className="stat-value">
                {dashboardData.totalCourts}
              </Card.Text>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="stat-card">
            <Card.Body>
              <Card.Title>T·ªïng Doanh Thu</Card.Title>
              <Card.Text className="stat-value">
                {formatPrice(dashboardData.totalRevenue)}ƒë
              </Card.Text>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      <div className="chart-container">
        <Row>
          <Col md={8}>
            <div className="chart-card">
              <h4>Doanh thu theo lo·∫°i s√¢n</h4>
              {dashboardData.recentBookings.length > 0 ? (
                <Bar
                  data={prepareChartData().revenueData}
                  options={{
                    responsive: true,
                    plugins: {
                      legend: {
                        display: false
                      },
                      tooltip: {
                        callbacks: {
                          label: (context) => {
                            return ` ${formatPrice(context.raw)}ƒë`;
                          }
                        }
                      }
                    },
                    scales: {
                      y: {
                        beginAtZero: true,
                        ticks: {
                          callback: (value) => formatPrice(value) + 'ƒë'
                        }
                      }
                    }
                  }}
                />
              ) : (
                <p>Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã</p>
              )}
            </div>
          </Col>
          <Col md={4}>
            <div className="chart-card">
              <h4>Ph√¢n b·ªï tr·∫°ng th√°i ƒë∆°n</h4>
              {dashboardData.recentBookings.length > 0 ? (
                <Pie
                  data={prepareChartData().statusData}
                  options={{
                    responsive: true,
                    plugins: {
                      legend: {
                        position: 'bottom'
                      },
                      tooltip: {
                        callbacks: {
                          label: (context) => {
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = Math.round((context.raw / total) * 100);
                            return `${context.label}: ${context.raw} ƒë∆°n (${percentage}%)`;
                          }
                        }
                      }
                    }
                  }}
                />
              ) : (
                <p>Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã</p>
              )}
            </div>
          </Col >
        </Row>
      </div>

      <Card className="recent-bookings-card">
        <Card.Body>
          <div className="card-header">
            <Card.Title className="section-title">
              ƒê∆°n ƒê·∫∑t S√¢n G·∫ßn ƒê√¢y
            </Card.Title>
          </div>

          {dashboardData.recentBookings.length > 0 ? (
            <>
              <div className="booking-list">
                {dashboardData.recentBookings.map((booking) => (
                  <div key={booking.bookingId} className="booking-item">
                    <div className="booking-info">
                      <div className="customer-info">
                        <strong>{booking.customerName ? booking.customerName : "N/A"}</strong>
                        <div>{booking.customerPhone}</div>
                        <div>{booking.customerEmail}</div>
                      </div>
                      <div className="booking-details">
                        <div>
                          <strong>Ng√†y check-in:</strong> {booking.checkInDate}
                        </div>
                        <div>
                          <strong>L∆∞·ª£t ƒë·∫∑t s√¢n:</strong> {booking.timeSlotCount}
                        </div>
                      </div>
                      <div className="booking-status">
                        <div
                          className={`status-badge ${getStatusClass(
                            booking.bookingStatus
                          )}`}
                        >
                          {booking.bookingStatus}
                        </div>
                        <div className="booking-price">
                          {formatPrice(booking.totalPrice)}ƒë
                        </div>
                      </div>
                    </div>
                    <div className="booking-actions d-flex justify-content-center mt-3">
                      <Button
                        variant="success"
                        className="detail-btn"
                        onClick={() => handleViewDetail(booking)}
                      >
                        <i className="fas fa-eye me-2"></i>
                        Xem chi ti·∫øt
                      </Button>
                    </div>
                  </div>
                ))}
              </div>

              {/* Th√™m ph√¢n trang */}
              {bookingPagination.totalItems > 0 && (
                <div className="booking-pagination mt-3 d-flex justify-content-center">
                  <Pagination
                    current={bookingPagination.pageNumber}
                    pageSize={bookingPagination.pageSize}
                    total={bookingPagination.totalItems}
                    showSizeChanger
                    pageSizeOptions={['3', '5', '10']}
                    onChange={handleBookingPageChange}
                    onShowSizeChange={handleBookingPageSizeChange}
                    showTotal={(total, range) =>
                      `${range[0]}-${range[1]} / ${total} ƒë∆°n ƒë·∫∑t s√¢n`
                    }
                    showQuickJumper
                    size="default"
                    className="custom-pagination"
                  />
                </div>
              )}
            </>
          ) : (
            <div className="no-bookings">
              {error ? "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu booking" : "Kh√¥ng c√≥ ƒë∆°n ƒë·∫∑t s√¢n g·∫ßn ƒë√¢y"}
            </div>
          )}
        </Card.Body>
      </Card>

      {/* ‚úÖ MODAL COMMISSION */}
      <CommissionModal
        show={showCommissionModal}
        onHide={handleCloseCommissionModal}
      />

      {/* ‚úÖ MODAL DANH S√ÅCH COMMISSION */}
      <CommissionListModal
        show={showCommissionListModal}
        onHide={handleCloseCommissionList}
      />

      <BookingDetailModal
        show={showDetailModal}
        onHide={() => setShowDetailModal(false)}
        booking={selectedBooking}
      />

      {/* ‚úÖ TH√äM TH√îNG B√ÅO TR√äN DASHBOARD KHI C√ì COMMISSION C·∫¶N THANH TO√ÅN */}
      {pendingCommissionCount > 0 && (
        <div className="commission-warning-banner mb-4">
          <div className="warning-content">
            <div className="warning-icon">
              <i className="fas fa-exclamation-triangle"></i>
            </div>
            <div className="warning-text">
              <h5>C·∫ßn thanh to√°n Commission</h5>
              <p>
                B·∫°n c√≥ <strong>{pendingCommissionCount} th√°ng</strong> ch∆∞a thanh to√°n commission. 
                Vui l√≤ng thanh to√°n ƒë·ªÉ tr√°nh b·ªã t·∫°m kh√≥a t√†i kho·∫£n.
              </p>
            </div>
            <div className="warning-action">
              <Button
                variant="danger"
                onClick={handleShowCommissionList}
                className="commission-cta-btn"
              >
                <i className="fas fa-credit-card me-2"></i>
                Thanh to√°n ngay
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// H√†m format gi√° ti·ªÅn
const formatPrice = (price) => {
  if (!price || price === 0) return "0";
  return parseInt(price).toLocaleString("vi-VN");
};

// H√†m x√°c ƒë·ªãnh class CSS d·ª±a tr√™n tr·∫°ng th√°i
const getStatusClass = (status) => {
  switch (status) {
    case "ƒê√£ ho√†n th√†nh":
      return "completed";
    case "ƒê√£ thanh to√°n":
      return "paid";
    case "ƒêang ch·ªù":
      return "pending";
    case "ƒê√£ h·ªßy":
      return "cancelled";
    default:
      return "";
  }
};

export default OwnerDashboard;